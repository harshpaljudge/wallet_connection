{"version":3,"sources":["App.js","index.js"],"names":["App","useState","tronAddress","setTronAddress","blockChainName","setBlockChainName","ethereumAddress","setEthereumAddress","solanaAddress","setSolanaAddress","onClick","window","tronWeb","defaultAddress","base58","ethereum","request","method","selectedAddress","chainId","solana","connect","on","console","log","publicKey","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAoEeA,MAlEf,WACE,MAAoCC,mBAAS,IAA7C,mBAAKC,EAAL,KAAkBC,EAAlB,KACA,EAA0CF,mBAAS,IAAnD,mBAAKG,EAAL,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAAKK,EAAL,KAAsBC,EAAtB,KACA,EAAwCN,mBAAS,IAAjD,mBAAKO,EAAL,KAAoBC,EAApB,KAgDE,OACE,gCACE,wBAAQC,QAhDd,WACMC,OAAOC,SAAWD,OAAOC,QAAQC,eAAeC,SAClDZ,EAAcS,OAAOC,QAAQC,eAAeC,OAC5CX,EAAeD,KA6Cb,iCACA,wBAAQQ,QA1Cd,WACE,GAAGC,OAAOI,SAAS,CACjBJ,OAAOI,SAASC,QAAQ,CAAEC,OAAQ,wBAClCX,EAAkBK,OAAOI,SAASG,gBAClCX,EAAmBD,GACnB,IAAIa,EAAUR,OAAOI,SAASI,QACf,YAAZA,EAEDd,EADAD,EAAiB,iBAGC,SAAZe,EAENd,EADAD,EAAiB,WAGC,QAAZe,EAENd,EADAD,EAAiB,qBAGC,QAAZe,EAENd,EADAD,EAAiB,oBAGC,QAAZe,GAENd,EADAD,EAAiB,sBAmBjB,iCACA,wBAAQM,QAdd,WACEC,OAAOS,OAAOC,UACdV,OAAOS,OAAOJ,QAAQ,CAAEC,OAAQ,YAChCN,OAAOS,OAAOE,GAAG,WAAW,kBAAMC,QAAQC,IAAI,iBAChB,MAA3Bb,OAAOS,OAAOK,YAEfjB,EAAgBG,OAAOS,OAAOK,UAAUC,WACxCjB,EAAiBD,KAOf,+BAEA,iDAAoBN,KACpB,oDAAuBE,EAAvB,MAA0CE,KAC1C,mDAAsBE,SCzD9BmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2503e62c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  let [tronAddress, setTronAddress] = useState(\"\");\n  let [blockChainName, setBlockChainName] = useState(\"\");\n  let [ethereumAddress, setEthereumAddress] = useState(\"\");\n  let [solanaAddress, setSolanaAddress] = useState(\"\");\n\n  function gettronweb() {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      tronAddress = window.tronWeb.defaultAddress.base58;\n      setTronAddress(tronAddress);\n    }\n  }\n\n  function getethereumweb() {\n    if(window.ethereum){\n      window.ethereum.request({ method: 'eth_requestAccounts' });\n      ethereumAddress = window.ethereum.selectedAddress;\n      setEthereumAddress(ethereumAddress);\n      let chainId = window.ethereum.chainId;\n      if(chainId === \"0x13881\"){\n        blockChainName = \"Polygon Matic\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x61\"){\n        blockChainName = \"Binance\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x1\"){\n        blockChainName = \"Ethereum Main Net\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x3\"){\n        blockChainName = \"Ropsten Test Net\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x4\"){\n        blockChainName = \"Rinkeby Test Net\";\n        setBlockChainName(blockChainName);\n      }\n    }\n  }\n\n  function getsolanaweb(){\n    window.solana.connect();\n    window.solana.request({ method: \"connect\" })\n    window.solana.on(\"connect\", () => console.log(\"connected!\"))\n    if(window.solana.publicKey != null)\n    {\n      solanaAddress = window.solana.publicKey.toString();\n      setSolanaAddress(solanaAddress);\n    }\n  }\n    return (\n      <div>\n        <button onClick={gettronweb}>Connect to TronLink</button>\n        <button onClick={getethereumweb}>Connect to MetaMask</button>\n        <button onClick={getsolanaweb}>Connect to Solana</button>\n        \n        <h1> Tron Address: {tronAddress}</h1>\n        <h1> MetaMask Address({blockChainName}): {ethereumAddress}</h1>\n        <h1> Solana Address: {solanaAddress}</h1>\n\n      </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}